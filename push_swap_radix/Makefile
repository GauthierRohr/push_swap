# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: grohr <grohr@student.42.fr>                +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/12/23 22:14:00 by huaydin           #+#    #+#              #
#    Updated: 2025/02/18 13:45:25 by grohr            ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME = push_swap
CC = cc
CFLAGS = -Wall -Wextra -Werror -g

LIBFT_DIR = libft
LIBFT = ./libft/libft.a

RM = rm -rf

SRCS =	utils.c \
		move.c \
		sort.c \
		main.c

SRC	= $(addprefix ./src/,$(SRCS))
OBJ = $(SRC:.c=.o)

all: $(LIBFT) $(NAME) 
	@echo "Make done!"
	@echo "Run 'make test' or 'make test size=x'"

$(LIBFT):
	@make -s -C $(LIBFT_DIR)

# -s : silent --> ne pas voir l'affichage des commandes executees
# -C : Change --> change de repertoire vers $(LIBFT_DIR), puis execute make dedans

$(NAME): $(LIBFT) $(OBJ)
	@$(CC) $(CFLAGS) $(OBJ) -o $(NAME) -L./$(LIBFT_DIR) -lft

# @ : Emp√™che l'affichage de la commande dans le terminal (juste l'ex√©cution)
# -o : output --> nom du fichier de sortie = a ce qui suit le -o (ici NAME)
# -L : Library path --> indiquer le chemin vers la librairie libft.a
# ./ : repertoire courant = dossier actuel.

$(OBJ): $(SRC)
	@$(CC) $(CFLAGS) -c $? -I./$(LIBFT_DIR)
	@mv *.o src

# -c : compile les .o sans creer d'executable
# $? : Liste uniquement les fichiers sources plus r√©cents que leurs objets .o (opti)
# -I : Include path
# -I./$(LIBFT_DIR) : Ajoute $(LIBFT_DIR) aux chemins de recherche des fichiers .h
#					 (n√©cessaire si libft.h dedans par exemple)

clean:	
	@$(RM) src/*.o
	@make -s -C $(LIBFT_DIR) clean

fclean:	clean
	@$(RM) $(NAME)
	@make -s -C $(LIBFT_DIR) fclean

re:	fclean all
	@$(RM) src/*.o
	@make -s -C $(LIBFT_DIR) clean

size ?= 30

# Si size pas definie avec "make test size=x", size = 30.

CHECKER = valgrind ./push_swap $(ARG) | ./checker_linux $(ARG)

test:
	@$(eval ARG = $(shell seq -10000 10000 | shuf -n $(size)))
	@echo "Checker result: "
	$(CHECKER)
	@echo "Instructions count:` "
	@./push_swap $(ARG) | wc -l

# $(eval ...) : √©value l'expression √† l'int√©rieur et affecte la valeur r√©sultante √† ARG.
# seq A B : G√©n√®re une s√©quence de nombres allant de A √† B.
# shuf : m√©lange des lignes de texte ou des nombres de mani√®re al√©atoire.
# -n : permet de sp√©cifier le nombre de lignes que shuf doit retourner apr√®s avoir m√©lang√© la s√©quence.


# ---------------------------------------------------
# Autisme 2.0
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[0;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
NC=\033[0m # (No Color)

flex:
	@echo "üéâ Flexing those muscles! üì∏"
	@sleep 0.5
	@echo "\n    ${RED}‚ú® ·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó ‚ú®${NC}\n"
	@sleep 0.5
	@echo "\n    ${GREEN}   ·ïô(‚úß⁄°‚úß)·ïó  ${NC}\n"
	@sleep 0.5
	@echo "\n    ${YELLOW}‚ö°Ô∏è ·ïô(^‚ñΩ^)·ïó ‚ö°Ô∏è${NC}\n"
	@sleep 0.5
	@echo "\n    ${BLUE}   ·ï¶(√≤_√≥Àá)·ï§  ${NC}\n"
	@sleep 0.5
	@echo "\n    ${PURPLE}üí• ·ïô(‚ñÄÃøÃøƒπÃØÃøÃø‚ñÄÃø Ãø)·ïó üí•${NC}\n"
	@sleep 0.5
	@echo "\nüèÜ Flex session complete! I'm a fcking boss"!

seum:
	@echo "\n ${RED}     -_- ${NC}\n"
	@sleep 0.5
	@echo "\n ${GREEN}   (Àö ÀÉÃ£Ã£Ã•‚åìÀÇÃ£Ã£Ã• ) ${NC}\n"
	@sleep 0.5
	@echo "\n ${CYAN}‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ${NC}\n"
	@sleep 0.5
	@echo "\n ${PURPLE}   (Ôæâ‡≤•Áõä‡≤•) ${NC}\n"
	@sleep 0.5
	@echo "\n ${YELLOW}   ·∂†·∂∏·∂ú·µè·µß‚Çí·µ§!${NC}\n"
	@sleep 0.5

.PHONY: all clean fclean test re
